/**
 * AutoCodigo.java
 *
 * Creado el 18-may-2015, 9:49:20
 */

package es.cajal.autocodigo.forms;

import es.cajal.autocodigo.Contenedor;
import es.cajal.autocodigo.Dialogos;
import es.cajal.autocodigo.exception.ExtException;
import es.cajal.autocodigo.generacion.CCampo;
import es.cajal.autocodigo.tablas.ModeloTablaCampos;
import es.cajal.autocodigo.tablas.TablaCampos;
import java.util.List;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


/**
 * Generación automática de código Java.
 * 
 * Para generar el ejecutable indpendiente de este proyecto:
 *   1) Ir a la vista "Files" en NetBeans.
 *   2) Clic derecho en "build.xml"
 *   3) Run Target --> Other targets --> package-for-store
 * 
 * Esto generará el fichero store/autocodigo.jar que se puede ejecutar directamente
 * 
 * 
 * @author pmpreciado
 */
public class FormAutoCodigo extends javax.swing.JFrame {

    
    Contenedor cnt;
    TablaCampos tabla_campos;

    
    
    
    /**
     * Creates new form NewApplication
     */
    public FormAutoCodigo() {
        initContenedor();
        
        cnt.logger.info("Inicializando componentes");
        initComponents();
        
        cnt.logger.info("Inicializando el modelo de la tabla de campos");
        ModeloTablaCampos mtc = new ModeloTablaCampos();
        jTablaCampos.setModel(mtc);

        cnt.logger.info("Inicializando la tabla de campos");
        tabla_campos = new TablaCampos(jTablaCampos);
        tabla_campos.init();
        
        cnt.logger.info("Inicializando el formulario de opciones");
        initFormOpciones();
    }

       
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaCampos = new javax.swing.JTable();
        btnSalir = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnGenerarCodigo = new javax.swing.JButton();
        btnImportarCodigo = new javax.swing.JButton();
        btnInsertarFila = new javax.swing.JButton();
        btnEliminarFilas = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tfNombreTabla = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfNombreClaseAccesoRegistro = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        miSalir = new javax.swing.JMenuItem();
        menuHerramientas = new javax.swing.JMenu();
        miOpciones = new javax.swing.JMenuItem();
        miImportarCodigo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AutoCódigo");

        jTablaCampos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTablaCampos.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jTablaCampos);

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnGenerarCodigo.setText("Generar código");
        btnGenerarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarCodigoActionPerformed(evt);
            }
        });

        btnImportarCodigo.setText("Importar código");
        btnImportarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarCodigoActionPerformed(evt);
            }
        });

        btnInsertarFila.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertarFila.setText("+");
        btnInsertarFila.setToolTipText("Inserta una fila en la posición actual de la tabla");
        btnInsertarFila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarFilaActionPerformed(evt);
            }
        });

        btnEliminarFilas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminarFilas.setText("-");
        btnEliminarFilas.setToolTipText("Elimina las filas seleccionadas");
        btnEliminarFilas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarFilasActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre de la tabla:");

        jLabel2.setText("Nombre de la clase:");

        menuArchivo.setMnemonic('a');
        menuArchivo.setText("Archivo");

        miSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        miSalir.setMnemonic('x');
        miSalir.setText("Salir");
        miSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(miSalir);

        menuBar.add(menuArchivo);

        menuHerramientas.setMnemonic('h');
        menuHerramientas.setText("Herramientas");

        miOpciones.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpciones.setMnemonic('t');
        miOpciones.setText("Opciones...");
        miOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpcionesActionPerformed(evt);
            }
        });
        menuHerramientas.add(miOpciones);

        miImportarCodigo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        miImportarCodigo.setText("Importar código...");
        miImportarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miImportarCodigoActionPerformed(evt);
            }
        });
        menuHerramientas.add(miImportarCodigo);

        menuBar.add(menuHerramientas);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnInsertarFila)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminarFilas)
                .addGap(11, 11, 11))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnImportarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 244, Short.MAX_VALUE)
                        .addComponent(btnGenerarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfNombreTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfNombreClaseAccesoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfNombreTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(tfNombreClaseAccesoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsertarFila)
                    .addComponent(btnEliminarFilas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir)
                    .addComponent(btnLimpiar)
                    .addComponent(btnGenerarCodigo)
                    .addComponent(btnImportarCodigo))
                .addContainerGap())
        );

        btnInsertarFila.getAccessibleContext().setAccessibleDescription("Inserta una fila a la tabla");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSalirActionPerformed
        salir();
    }//GEN-LAST:event_miSalirActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        salir();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void miOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpcionesActionPerformed
        mostrarOpciones();
    }//GEN-LAST:event_miOpcionesActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnImportarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarCodigoActionPerformed
        mostrarImportarCodigo();
    }//GEN-LAST:event_btnImportarCodigoActionPerformed

    private void miImportarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miImportarCodigoActionPerformed
        mostrarImportarCodigo();
    }//GEN-LAST:event_miImportarCodigoActionPerformed

    private void btnInsertarFilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarFilaActionPerformed
        insertarFila();
    }//GEN-LAST:event_btnInsertarFilaActionPerformed

    private void btnEliminarFilasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarFilasActionPerformed
        eliminarFilas();
    }//GEN-LAST:event_btnEliminarFilasActionPerformed

    private void btnGenerarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarCodigoActionPerformed
        mostrarGenerarCodigo();
    }//GEN-LAST:event_btnGenerarCodigoActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAutoCodigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAutoCodigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAutoCodigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAutoCodigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FormAutoCodigo().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminarFilas;
    private javax.swing.JButton btnGenerarCodigo;
    private javax.swing.JButton btnImportarCodigo;
    private javax.swing.JButton btnInsertarFila;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablaCampos;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuHerramientas;
    private javax.swing.JMenuItem miImportarCodigo;
    private javax.swing.JMenuItem miOpciones;
    private javax.swing.JMenuItem miSalir;
    private javax.swing.JTextField tfNombreClaseAccesoRegistro;
    private javax.swing.JTextField tfNombreTabla;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Inicializa el objeto contenedor.
     */
    private void initContenedor() {
        try {
            cnt = new Contenedor();
        } catch (ExtException ex) {
            Logger logger = LogManager.getRootLogger();
            logger.fatal("No se ha podido inicializar la aplicación", ex);
            salir();
        }
        
        cnt.setFormAutocodigo(this);
    }
    
    
    /**
     * Sale de la aplicación.
     */
    private void salir() {
        System.exit(0);
    }
    
    
    /**
     * Limpia el contenido de la tabla de campos.
     */
    private void limpiarTabla() {
        this.tabla_campos.clear();
    }

    
    /**
     * Inicializa el formulario con las opciones.
     * Si ya estuviera inicializado, no hace nada.
     */
    private void initFormOpciones() {
        if (cnt.formOpciones == null) {
            FormOpciones formOpciones = new FormOpciones(cnt);
            cnt.setFormOpciones(formOpciones);
            formOpciones.propiedades2Atributos(cnt.propiedades);
        }
    }
    
    
    /**
     * Muestra el formulario con las opciones.
     */
    private void mostrarOpciones() {
        initFormOpciones();
        cnt.formOpciones.mostrar();
    }
 
    
    /**
     * Muestra el formulario para importar código.
     */
    private void mostrarImportarCodigo() {
        if (cnt.formImportarCodigo == null) {
            FormImportarCodigo formImportarCodigo = new FormImportarCodigo(cnt);
            cnt.setFormImportarCodigo(formImportarCodigo);
        }
        
        cnt.formImportarCodigo.mostrar();
    }

    
    /**
     * Muestra el formulario para mostrar el código generado.
     */
    private void mostrarGenerarCodigo() {
        if (cnt.formGenerarCodigo == null) {
            FormGenerarCodigo formGenerarCodigo = new FormGenerarCodigo(cnt);
            cnt.setFormGenerarCodigo(formGenerarCodigo);
        }
        
        List <CCampo> l_campos = this.getCamposTabla();
        if (l_campos.isEmpty()) {
            String mensaje = "No hay definido ningún campo";
            Dialogos.showMessageDialog(cnt, this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            cnt.formGenerarCodigo.mostrar();
        }
    }

    
    /**
     * Inserta una fila en la posición actual de la tabla.
     */
    private void insertarFila() {
        int fila_actual = this.jTablaCampos.getSelectedRow();
        if (fila_actual < 0) {
            fila_actual = this.jTablaCampos.getRowCount();
        }
        ModeloTablaCampos mtc = (ModeloTablaCampos) jTablaCampos.getModel();
        mtc.addEmptyRowAt(fila_actual);
    }

    
    /**
     * Elimina las filas actualmente seleccionadas.
     */
    private void eliminarFilas() {
        int [] indices_filas_seleccionadas = this.jTablaCampos.getSelectedRows();
        
        ModeloTablaCampos mtc = (ModeloTablaCampos) jTablaCampos.getModel();
        for (int i = indices_filas_seleccionadas.length - 1; i >= 0; i--) {
            int indice_fila_a_borrar = indices_filas_seleccionadas[i];
            mtc.deleteRow(indice_fila_a_borrar);
        }
    }

    
    /**
     * Obtiene el nombre de la tabla para la que se está generando el código automático.
     * Este nombre lo ha introducido el usuario en un cuadro de texto.
     * 
     * @return                                  Nombre de la tabla
     */
    public String getNombreTabla() {
        String nombre_tabla = this.tfNombreTabla.getText();
        nombre_tabla = nombre_tabla.trim();
        return nombre_tabla;
    }

    
    /**
     * Obtiene el nombre de la clase para el acceso al registro para el que se está generando el código automático.
     * Este nombre lo ha introducido el usuario en un cuadro de texto.
     * 
     * @return                                  Nombre de la clase para el acceso al registro
     */
    public String getNombreClaseAccesoRegistro() {
        String nombre_tabla = this.tfNombreClaseAccesoRegistro.getText();
        nombre_tabla = nombre_tabla.trim();
        return nombre_tabla;
    }

    
    /**
     * Genera una lista de campos a partir de la información de la tabla.
     * 
     * @return                                  Lista de campos
     */
    public List <CCampo> getCamposTabla() {
        List <CCampo> l_campos = this.tabla_campos.tabla2Campos();
        return l_campos;
    }
}
